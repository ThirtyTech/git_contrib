@page "/"
@rendermode RenderMode.InteractiveServer
@using System.Linq
@using System.Reactive.Linq
@using System.Text.Json
@inject Options Options

<MudThemeProvider IsDarkMode />
<MudDialogProvider />
<MudSnackbarProvider />
<PageTitle>@Options.Path - Git Contrib</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" class="mt-10">
    <div class="flex gap-8">
        <MudSelect T="string" Label="Authors" MultiSelection="true" SelectedValues="@SelectedAuthors" class="flex-1"
            SelectedValuesChanged="UpdateAuthors" SelectAll>
            @foreach (var author in Authors)
            {
                <MudSelectItem Value="@author">@author</MudSelectItem>
            }
        </MudSelect>
        <MudDatePicker class="flex-none" Label="From Date" Date="FromDate" DateChanged="@((date) => {
        if (date.HasValue)
        {
            FromDate = date.Value;
            UpdateAuthors(SelectedAuthors);
        }

        })" />
        <MudDatePicker class="flex-none" Label="To Date" Date="ToDate" DateChanged="@((date) => {

        if (date.HasValue)
        {
            ToDate = date.Value;
            UpdateAuthors(SelectedAuthors);
        }
        })" />

    </div>
    <MudGrid Spacing="2" style="margin-top: 20px;">
        <MudItem xs="6">
            <MudPaper>
                <MudText Typo="Typo.h5" style="padding: 12px">Lines of code</MudText>
                <MudChart ChartType="ChartType.Bar" ChartSeries="@LinesOfCode" XAxisLabels="@XAxisLabels" Width="100%"
                    Height="280px">
                </MudChart>
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
            <MudPaper>
                <MudText Typo="Typo.h5" style="padding: 12px">Files</MudText>
                <MudChart ChartType="ChartType.Bar" ChartOptions="ChartOptions" ChartSeries="@Files"
                    XAxisLabels="@XAxisLabels" Width="100%" Height="280px">
                </MudChart>
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
            <MudPaper>
                <MudText Typo="Typo.h5" style="padding: 12px">Commits</MudText>
                <MudChart ChartType="ChartType.Bar" ChartOptions="ChartOptions" ChartSeries="@Commits"
                    XAxisLabels="@XAxisLabels" Width="100%" Height="280px">
                </MudChart>
            </MudPaper>
        </MudItem>
    </MudGrid>

</MudContainer>


@code {
    public int? IntValue { get; set; } = 5;
    public List<ChartSeries> LinesOfCode = new();
    public List<ChartSeries> Files = new();
    public List<ChartSeries> Commits = new();
    public List<string> Authors = new();
    private IEnumerable<string> SelectedAuthors { get; set; } = new HashSet<string>();
    public string[] XAxisLabels = Array.Empty<string>();
    public DateTime FromDate = DateTime.Now.AddDays(-7).Date;
    public DateTime ToDate = DateTime.Now.Date;

    public ChartOptions ChartOptions = new()
        {
            YAxisTicks = 1
        };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var days = (DateTime.Now - Options.FromDate).Days;
        FromDate = Options.FromDate.Date;
        ToDate = Options.ToDate.Date;
        await UpdateAuthors(Array.Empty<string>());
    }

    public async Task UpdateAuthors(IEnumerable<string> authors)
    {
        SelectedAuthors = authors;

        var days = (ToDate - FromDate).Days + 1;
        XAxisLabels = Enumerable.Range(0, days).Select(i => FromDate.AddDays(i).ToString("MM/dd")).ToArray();
        var results = await Work.DoWork(new Options
            {

                Fetch = false,
                FromDate = FromDate.Date,
                ToDate = ToDate.Date,
                Path = Options.Path,
                Mailmap = Options.Mailmap,
                IgnoreAuthors = Options.IgnoreAuthors,
                IgnoreFiles = Options.IgnoreFiles,
                Format = global::Format.None
            });

        var uniqueAuthors = results?.Select(x => x.Name).Distinct().ToList();
        if (SelectedAuthors.Count() > 0)
        {
            uniqueAuthors = uniqueAuthors?.Where(x => SelectedAuthors.Contains(x)).ToList();
        }
        if (uniqueAuthors != null && Authors.Count() == 0)
        {
            Authors = uniqueAuthors;
        }

        var dateRange = Enumerable.Range(0, 1 + ToDate.Subtract(FromDate).Days).Select(offset =>
        DateOnly.FromDateTime(FromDate.AddDays(offset).Date)).ToList();

        LinesOfCode = uniqueAuthors.Select(author =>
        {
            var data = dateRange.Select(d =>
    {
    var num = results?.FirstOrDefault(x => x.Name == author)?.ChangeMap.Where(x => DateOnly.Parse(x.Key) == d).Sum(x =>
    x.Value.Additions + x.Value.Deletions);
    return num ?? 0d;
            }).ToArray();

            return new ChartSeries
                {
                    Name = author,
                    Data = data
                };
        }).ToList();

        Files = uniqueAuthors.Select(author =>
        {
            var data = dateRange.Select(d =>
    {
    var num = results?.FirstOrDefault(x => x.Name == author)?.ChangeMap.Where(x => DateOnly.Parse(x.Key) == d).Sum(x =>
    x.Value.Files);
    return num ?? 0d;
            }).ToArray();
            return new ChartSeries
                {
                    Name = author,
                    Data = data
                };
        }).ToList();

        Commits = uniqueAuthors.Select(author =>
        {
            var data = dateRange.Select(d =>
    {
    var num = results?.FirstOrDefault(x => x.Name == author)?.ChangeMap.Where((x) => DateOnly.Parse(x.Key) == d).Sum(x =>
    x.Value.Commits);
    return num ?? 0d;
            }).ToArray();
            return new ChartSeries
                {
                    Name = author,
                    Data = data
                };
        }).ToList();
    }

}
