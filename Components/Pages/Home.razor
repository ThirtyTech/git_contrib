@page "/"
@attribute [RenderModeServer]
@using System.Linq
@using System.Reactive
@using System.Reactive.Linq
@inject Options Options;

<PageTitle>Home</PageTitle>

<div style="margin-top:16px; padding: 16px">
    <MudGrid Spacing="2">
        <MudItem xs="6">
            <MudPaper>
                <MudText Typo="Typo.h5" style="padding: 12px">Lines of code</MudText>
                <MudChart ChartType="ChartType.Bar" ChartSeries="@LinesOfCode" XAxisLabels="@XAxisLabels" Width="100%"
                    Height="280px">
                </MudChart>
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
            <MudPaper>
                <MudText Typo="Typo.h5" style="padding: 12px">Files</MudText>
                <MudChart ChartType="ChartType.Bar" ChartOptions="ChartOptions" ChartSeries="@Files"
                    XAxisLabels="@XAxisLabels" Width="100%" Height="280px">
                </MudChart>
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
            <MudPaper>
                <MudText Typo="Typo.h5" style="padding: 12px">Commits</MudText>
                <MudChart ChartType="ChartType.Bar" ChartOptions="ChartOptions" ChartSeries="@Commits"
                    XAxisLabels="@XAxisLabels" Width="100%" Height="280px">
                </MudChart>
            </MudPaper>
        </MudItem>
    </MudGrid>


</div>

@code {
    public List<ChartSeries> LinesOfCode = new List<ChartSeries>();
    public List<ChartSeries> Files = new List<ChartSeries>();
    public List<ChartSeries> Commits = new List<ChartSeries>();
    public string[] XAxisLabels = [];
    public ChartOptions ChartOptions = new ChartOptions
        {
            YAxisTicks = 1
        };

    protected override async Task OnInitializedAsync()
    {
        var options = new Options()
            {
                Path = Options.Path,
                FromDate = DateTimeOffset.Now.AddDays(-10)
            };

        var days = (DateTime.Now - options.FromDate).Days;

        var rangeResults = (await Observable.Range(0, days)
        .Select(i => Observable.Start(() =>
        {
            var result = Work.DoWork(new Options
                {
                    Fetch = false,
                    FromDate = options.FromDate.AddDays(i).Date,
                    ToDate = options.FromDate.AddDays(i + 1).Date,
                    Path = options.Path,
                    Mailmap = options.Mailmap,
                    Format = global::Format.None
                });
            return (i, result);
        }))
        .Merge(Environment.ProcessorCount - 1).ToList())
        .OrderBy(x => x.i).ToList();

        XAxisLabels = Enumerable.Range(0, days).Select(i => options.FromDate.AddDays(i).ToString("MM/dd")).ToArray();

        var uniqueAuthors = rangeResults.SelectMany(x => x.result).Select(x => x.Author).Distinct().ToList();

        LinesOfCode = uniqueAuthors.Select(author =>
        {
            var data = Enumerable.Range(0, days).Select(i =>
    {
    var num = rangeResults[i].result.FirstOrDefault(x => x.Author == author)?.Totals.Lines;
    return num ?? 0d;

            }).ToArray();

            return new ChartSeries
                {
                    Name = author,
                    Data = data
                };
        }).ToList();

        Files = uniqueAuthors.Select(author =>
        {
            var data = Enumerable.Range(0, days).Select(i =>
    {
    var num = rangeResults[i].result.FirstOrDefault(x => x.Author == author)?.Totals.Files;
    return num ?? 0d;

            }).ToArray();
            return new ChartSeries
                {
                    Name = author,
                    Data = data
                };
        }).ToList();

        Commits = uniqueAuthors.Select(author =>
        {
            var data = Enumerable.Range(0, days).Select(i =>
    {
    var num = rangeResults[i].result.FirstOrDefault(x => x.Author == author)?.Totals.Commits;
    return num ?? 0d;

            }).ToArray();
            return new ChartSeries
                {
                    Name = author,
                    Data = data
                };
        }).ToList();

    }

}
